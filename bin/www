#!/usr/bin/env node

/**
 * Module dependencies.
 */
const initializeApp = require('../index');
const debug = require('debug')('first-step:server');
const http = require('http');

/**
 * Get port from environment.
 */
const port = normalizePort(process.env.PORT || '3000');

/**
 * Run application and start the server after initialization.
 */
(async () => {
  try {
    console.log('Starting the application...');

    const app = await initializeApp();
    app.set('port', port);

    console.log('Initialization completed. Starting the server...');

    const server = http.createServer(app);
    server.listen(port, () => {
      console.log(`Server successfully started and listening on port ${port}`);
    });

    server.on('error', onError);
    server.on('listening', onListening);

  } catch (error) {
    console.error('Application startup error:', error);
    process.exit(1);
  }
})();


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  console.log('The "listening" event is being handled.');
  const addr = this.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Server is listening on ' + bind);
}